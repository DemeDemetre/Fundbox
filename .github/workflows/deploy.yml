name: Deploy Flask Application

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t flask-aws-app .

      - name: Push Docker Image to DockerHub
        run: docker tag flask-aws-app:latest ${{ secrets.DOCKER_USERNAME }}/flask-aws-app:latest && docker push ${{ secrets.DOCKER_USERNAME }}/flask-aws-app:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}

      - name: Get EC2 Public IP
        id: get_ip
        run: |
          PUBLIC_IP=$(terraform output -raw public_ip | grep -Eo '([0-9]{1,3}\.){3}[0-9]{1,3}')
          echo "EC2_PUBLIC_IP=${PUBLIC_IP}" | tr -d '\n' >> $GITHUB_ENV
          echo "Public IP: ${PUBLIC_IP}"  # Add this line to debug
        shell: bash

      - name: Wait for 2 Minutes Before Deployment
        run: |
          echo "Waiting for 2 minutes to ensure EC2 instance is fully ready..."
          sleep 240

      # Step 6: SSH into EC2 instance and deploy the application
      - name: Deploy Flask App to EC2
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ env.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          debug: true
          script: |
            echo "Connected successfully. Starting deployment..."
            # Update system packages
            sudo yum update -y

            # Install Docker
            sudo yum install -y docker
            sudo service docker start
            sudo usermod -aG docker ec2-user

            # Pull and deploy the Dockerized Flask application
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/flask-aws-app:latest
            sudo docker stop flask-app || true
            sudo docker rm flask-app || true
            sudo docker run -d -p 5000:5000 --name flask-app ${{ secrets.DOCKER_USERNAME }}/flask-aws-app:latest
